// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Implements the risk assessment flow for tax form data.
 *
 * - assessTaxFormRisk - A function that assesses the risk of a tax form.
 * - AssessTaxFormRiskInput - The input type for the assessTaxFormRisk function.
 * - AssessTaxFormRiskOutput - The return type for the assessTaxFormRisk function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssessTaxFormRiskInputSchema = z.object({
  extractedData: z
    .string()
    .describe('The extracted tax form data in JSON format.'),
});
export type AssessTaxFormRiskInput = z.infer<typeof AssessTaxFormRiskInputSchema>;

const AssessTaxFormRiskOutputSchema = z.object({
  riskAssessment: z
    .string()
    .describe(
      'An analysis of potential risks or inconsistencies in the tax form data.'
    ),
  redFlags: z.array(
    z.string().describe('Specific red flags or issues identified in the data.')
  ),
});
export type AssessTaxFormRiskOutput = z.infer<typeof AssessTaxFormRiskOutputSchema>;

export async function assessTaxFormRisk(input: AssessTaxFormRiskInput): Promise<AssessTaxFormRiskOutput> {
  return assessTaxFormRiskFlow(input);
}

const assessTaxFormRiskPrompt = ai.definePrompt({
  name: 'assessTaxFormRiskPrompt',
  model: 'googleai/gemini-2.0-flash',
  input: {schema: AssessTaxFormRiskInputSchema},
  output: {schema: AssessTaxFormRiskOutputSchema},
  prompt: `You are a tax expert reviewing extracted data from a user's tax form to identify potential risks, inconsistencies, and red flags.

  Analyze the following extracted data (in JSON format):
  {{{extractedData}}}

  Based on this data, provide a risk assessment, highlighting any potential issues that the user should review before filing their taxes. Identify any specific red flags or inconsistencies in the data.

  Consider factors such as unusually high deductions, missing information, income discrepancies, and other potential areas of concern.
  Provide the output as a JSON object.
  `,
});

const assessTaxFormRiskFlow = ai.defineFlow(
  {
    name: 'assessTaxFormRiskFlow',
    inputSchema: AssessTaxFormRiskInputSchema,
    outputSchema: AssessTaxFormRiskOutputSchema,
  },
  async input => {
    const {output} = await assessTaxFormRiskPrompt(input);
    return output!;
  }
);
